<#@ template debug="false" hostspecific="false" language="C#" #>

<#@ parameter name="AggregateType" type="System.Type" #>
<#@ parameter name="MessageTypes" type="System.Collections.Generic.List<Type>" #>

<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CQRSalad.EventSourcing" #>
<#
string aggregateName = AggregateType.FullName;
string serviceName = AggregateType.Name.Replace("Aggregate", "") + "ApplicationService";
string serviceNamespace = AggregateType.Namespace;
#>
using System.Threading.Tasks;
using System.Collections.Generic;
using CQRSalad.EventSourcing;

namespace <#= serviceNamespace #>
{
	public class <#= serviceName #> : ApplicationService<<#= aggregateName #>>
	{
		public <#= serviceName #>(IAggregateRepository<<#= aggregateName #>> aggregateRepository)
				: base(aggregateRepository)
		{		
		}
		
		<#foreach(var messageType in MessageTypes) { #>
	
			public async Task<IEnumerable<IEvent>> Handle(<#= messageType.FullName #> command)
			{
				return await Process(command);				
			}
	<# } #>
	}
} 