<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="AggregateType" type="System.Type" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)bin\Debug\CQRSalad.EventStore.Core.dll" #>
<#@ assembly name="$(ProjectDir)bin\Debug\CQRSalad.EventSourcing.dll" #>
<#@ import namespace="System.Reflection" #><#@ import namespace="System.Collections.Generic" #><#@ import namespace="System.Linq" #><#@ output extension=".cs" #><#@ import namespace="CQRSalad.EventSourcing" #>
<#
List<Type> messageTypes = AggregateType.GetMethodsWithSingleParameter()
				.Where(method => typeof (ICommand).IsAssignableFrom(method.GetParameters()[0].ParameterType))
				.Select(method => method.GetParameters()[0].ParameterType)
				.ToList();

string aggregateName = AggregateType.FullName;
string serviceName = AggregateType.Name.Replace("Aggregate", "") + "ApplicationService";
string serviceNamespace = AggregateType.Namespace;
#>
using System.Threading.Tasks;
using CQRSalad.EventSourcing;
using System.Collections.Generic;

namespace <#= serviceNamespace #>
{
	[CQRSalad.Dispatching.DispatcherHandler]
	public class <#= serviceName #> : ApplicationService<<#= aggregateName #>>
	{
		public <#= serviceName #>(IAggregateRepository<<#= aggregateName #>> aggregateRepository)
				: base(aggregateRepository)
		{		
		}
		
		<#foreach(var messageType in messageTypes) { #>
	
			public async Task<List<IEvent>> Handle(<#= messageType.FullName #> command)
			{
				return await Process(command);				
			}
	<# } #>
	}
}